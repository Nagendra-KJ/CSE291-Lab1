
#include"util.h"
// mman library to be used for hugepage allocations (e.g. mmap or posix_memalign only)
#include <sys/mman.h>

#define L1_SIZE 1 * 64 * 1024
#define L2_SIZE 1 * 256 * 1024
#define BUFF_SIZE 1 * L2_SIZE
#define ACCESS_THRESHOLD 40

void prime(volatile uint8_t *buffer)
{
    int tmp;

    for (int i = 0; i < BUFF_SIZE; ++i) {
	   tmp = buffer[i]; 
    }


}

int main(int argc, char **argv)
{
    // [Bonus] TODO: Put your covert channel setup code here
    
    volatile uint8_t *buffer = (uint8_t*) malloc(BUFF_SIZE * sizeof(char));
    volatile int found_ctr[256];
    for (int i = 0; i < 256; ++i)
    {
    	found_ctr[i] = 0;
    }
    memset((void *) buffer, 0, BUFF_SIZE * sizeof(char));
    prime(buffer);
    printf("Please press enter.\n");

    char text_buf[2];
    fgets(text_buf, sizeof(text_buf), stdin);

    prime(buffer);
    printf("Receiver now listening.\n");

    printf("The address is %p\n", buffer);
    volatile bool listening = true;
    while (listening) {
	for (volatile int i = 0; i < 256; ++i)
	{
		volatile int access_time = measure_one_block_access_time(buffer + 65536);
		if (access_time > ACCESS_THRESHOLD) {
		    found_ctr[i]++;
		    if (found_ctr[i] > 10) {
		    	printf("The access time is %d. The sender has sent %d\n", access_time, i);
			listening = false;
		    }
		}
	}
    }

    printf("Receiver finished.\n");

    return 0;
}


